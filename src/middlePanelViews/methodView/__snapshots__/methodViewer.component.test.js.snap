// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Method viewer renders correctly for array once local state is initialised 1`] = `
<WithStyles(WidgetTable)
  addRow={[Function]}
  attribute={
    Object {
      "calculated": Object {
        "errorMessage": undefined,
        "errorState": false,
        "inputs": Object {
          "first": Object {
            "value": 3,
          },
          "second": Object {
            "isAString": true,
            "value": "four",
          },
          "third": Object {
            "flags": Object {
              "rows": Array [],
            },
            "meta": Object {
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/StringArrayMeta:1.0",
              "writeable": true,
            },
            "value": Array [
              "SEVEN",
            ],
          },
        },
        "isMethod": true,
        "name": "Method",
        "outputs": Object {},
        "path": Array [
          "Test",
          "Method",
        ],
      },
      "raw": Object {
        "defaults": Object {},
        "label": "Test",
        "returns": Object {
          "elements": Object {
            "first": Object {
              "label": "First output",
              "tags": Array [
                "widget:led",
              ],
            },
            "second": Object {
              "label": "Second output",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "third": Object {
              "label": "Third output",
              "tags": Array [
                "widget:textupdate",
              ],
              "typeid": "malcolm:core/StringArrayMeta:1.0",
            },
          },
        },
        "takes": Object {
          "elements": Object {
            "first": Object {
              "description": "a test input",
              "label": "First input",
              "tags": Array [
                "widget:textinput",
              ],
            },
            "second": Object {
              "description": "a test input",
              "label": "Second input",
              "tags": Array [
                "widget:tree",
              ],
            },
            "third": Object {
              "description": "an array",
              "label": "Third input",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/StringArrayMeta:1.0",
              "writeable": true,
            },
          },
        },
      },
    }
  }
  closePanelHandler={[Function]}
  eventHandler={[Function]}
  infoClickHandler={[Function]}
  localState={
    Object {
      "flags": Object {
        "rows": Array [],
      },
      "meta": Object {
        "tags": Array [
          "widget:textinput",
        ],
        "typeid": "malcolm:core/StringArrayMeta:1.0",
        "writeable": true,
      },
      "value": Array [
        "SEVEN",
      ],
    }
  }
  rowClickHandler={[Function]}
  setFlag={[Function]}
/>
`;

exports[`Method viewer renders input correctly with initial value 1`] = `
<MethodArchive
  defaultTab={0}
  methodArchive={
    Object {
      "alarmState": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "name": "Method",
      "timeStamp": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "value": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
    }
  }
  openPanels={
    Object {
      "child": undefined,
      "parent": undefined,
    }
  }
  selectedParam={
    Array [
      "takes",
      "first",
    ]
  }
/>
`;

exports[`Method viewer renders input correctly with no initial value 1`] = `
<MethodArchive
  defaultTab={0}
  methodArchive={
    Object {
      "alarmState": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "name": "Method",
      "timeStamp": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "value": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
    }
  }
  openPanels={
    Object {
      "child": undefined,
      "parent": undefined,
    }
  }
  selectedParam={
    Array [
      "takes",
      "first",
    ]
  }
/>
`;

exports[`Method viewer renders method param archive if selected parameter isnt a tree 1`] = `
<MethodArchive
  defaultTab={0}
  methodArchive={
    Object {
      "alarmState": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "name": "Method",
      "timeStamp": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "value": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
    }
  }
  openPanels={
    Object {
      "child": undefined,
      "parent": undefined,
    }
  }
  selectedParam={
    Array [
      "takes",
      "first",
    ]
  }
/>
`;

exports[`Method viewer renders output array correctly 1`] = `
<WithStyles(WidgetTable)
  addRow={[Function]}
  attribute={
    Object {
      "calculated": Object {
        "errorMessage": undefined,
        "errorState": false,
        "inputs": Object {},
        "isMethod": true,
        "name": "Method",
        "outputs": Object {
          "first": Object {
            "value": true,
          },
          "second": Object {
            "value": "done",
          },
          "third": Object {
            "value": Array [
              "something finished",
            ],
          },
        },
        "path": Array [
          "Test",
          "Method",
        ],
      },
      "raw": Object {
        "defaults": Object {},
        "label": "Test",
        "returns": Object {
          "elements": Object {
            "first": Object {
              "label": "First output",
              "tags": Array [
                "widget:led",
              ],
            },
            "second": Object {
              "label": "Second output",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "third": Object {
              "label": "Third output",
              "tags": Array [
                "widget:textupdate",
              ],
              "typeid": "malcolm:core/StringArrayMeta:1.0",
            },
          },
        },
        "takes": Object {
          "elements": Object {
            "first": Object {
              "description": "a test input",
              "label": "First input",
              "tags": Array [
                "widget:textinput",
              ],
            },
            "second": Object {
              "description": "a test input",
              "label": "Second input",
              "tags": Array [
                "widget:tree",
              ],
            },
            "third": Object {
              "description": "an array",
              "label": "Third input",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/StringArrayMeta:1.0",
              "writeable": true,
            },
          },
        },
      },
    }
  }
  closePanelHandler={[Function]}
  eventHandler={[Function]}
  infoClickHandler={[Function]}
  localState={
    Object {
      "flags": Object {
        "rows": Array [],
      },
      "meta": Object {
        "label": "Third output",
        "tags": Array [
          "widget:textupdate",
        ],
        "typeid": "malcolm:core/StringArrayMeta:1.0",
      },
      "value": Array [
        "something finished",
      ],
    }
  }
  rowClickHandler={[Function]}
  setFlag={[Function]}
/>
`;

exports[`Method viewer renders output correctly with initial value 1`] = `
<MethodArchive
  defaultTab={0}
  methodArchive={
    Object {
      "alarmState": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "name": "Method",
      "timeStamp": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "value": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
    }
  }
  openPanels={
    Object {
      "child": undefined,
      "parent": undefined,
    }
  }
  selectedParam={
    Array [
      "returns",
      "first",
    ]
  }
/>
`;

exports[`Method viewer renders output correctly with no initial value 1`] = `
<WithStyles(Typography)>
  No results yet...run method first!
</WithStyles(Typography)>
`;

exports[`Method viewer renders top-level method param archive if no selected parameter 1`] = `
<WithStyles(WidgetTable)
  addRow={[Function]}
  attribute={
    Object {
      "calculated": Object {},
      "raw": Object {
        "meta": Object {
          "elements": Object {
            "alarm": Object {
              "label": "Alarm state",
              "tags": Array [
                "info:alarm",
              ],
            },
            "copyParams": Object {
              "label": "Reuse run params",
              "tags": Array [
                "info:button",
              ],
              "writeable": true,
            },
            "postTime": Object {
              "label": "Time run",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "returnStatus": Object {
              "label": "Return Status",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "returnTime": Object {
              "label": "Time results received",
              "tags": Array [
                "widget:textupdate",
              ],
            },
          },
        },
        "value": Object {
          "alarm": Array [
            0,
            4,
          ],
          "copyParams": Array [
            Object {
              "action": [Function],
              "label": "Copy",
            },
            Object {
              "action": [Function],
              "label": "Copy",
            },
          ],
          "postTime": Array [
            1970-01-01T00:00:00.000Z,
            1969-07-19T23:20:18.000Z,
          ],
          "returnStatus": Array [
            undefined,
            undefined,
          ],
          "returnTime": Array [
            2018-09-10T12:46:58.205Z,
            1970-01-02T10:17:36.789Z,
          ],
        },
      },
    }
  }
  closePanelHandler={[Function]}
  eventHandler={[Function]}
  hideInfo={true}
  infoClickHandler={[Function]}
  rowClickHandler={[Function]}
  setFlag={[Function]}
/>
`;
