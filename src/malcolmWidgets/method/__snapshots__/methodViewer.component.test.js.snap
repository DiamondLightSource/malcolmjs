// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Method viewer renders correctly with initial value 1`] = `
<div>
  <div
    style={
      Object {
        "display": "initial",
        "left": 0,
        "textAlign": "left",
        "width": "calc(100% - 0px)",
      }
    }
  >
    <div
      style={
        Object {
          "height": "calc(100% - 56px)",
        }
      }
    >
      <t
        height="100%"
        id={
          Array [
            "takes",
            "second",
          ]
        }
        locale={
          Object {
            "brace": Object {
              "curly": Object {
                "cannotWrap": "'{token}' token cannot be wrapped in '{}' curly braces",
                "missingClose": "Open '{' curly brace is missing closing '}' curly brace",
                "missingOpen": "Missing '{' open curly brace",
              },
              "square": Object {
                "cannotWrap": "'{token}' token cannot be wrapped in '[]' square braces",
                "missingClose": "Open '[' square brace is missing closing ']' square brace",
                "missingOpen": "Missing '[' open square brace",
              },
            },
            "format": "{reason} at line {line}",
            "invalidToken": Object {
              "double": "'{token}' token cannot be followed by another '{token}' token",
              "sequence": "'{firstToken}' token cannot be followed by a '{secondToken}' token",
              "unexpected": "Unexpected '{token}' token found",
              "useInstead": "'{badToken}' token is not accepted. Use '{goodToken}' instead",
              "whitelist": "'{firstToken}' token can only follow '{secondToken}' token",
            },
            "key": Object {
              "numberAndLetterMissingQuotes": "Key beginning with number and containing letters must be wrapped by quotes",
              "spaceMissingQuotes": "Key containing space must be wrapped by quotes",
              "unexpectedString": "Unexpected string found at key position",
            },
            "noTrailingOrLeadingComma": "Trailing or leading commas in arrays and objects are not permitted",
            "string": Object {
              "missingClose": "Missing/invalid closing string '{quote}' token",
              "missingOpen": "Missing/invalid opening string '{quote}' token",
              "mustBeWrappedByQuotes": "Strings must be wrapped by quotes",
              "nonAlphanumeric": "Non-alphanemeric token '{token}' is not allowed outside string notation",
              "unexpectedKey": "Unexpected key found at string position",
            },
          }
        }
        onChange={[Function]}
        placeholder={
          Object {
            "isAString": true,
            "value": "four",
          }
        }
        style={
          Object {
            "body": Object {
              "fontSize": "150%",
            },
          }
        }
        width="100%"
      />
    </div>
    <WithStyles(Table)>
      <WithStyles(TableFooter)>
        <WithStyles(TableRow)>
          <WithStyles(TableCell)
            key="0"
          >
            <WithStyles(ButtonAction)
              clickAction={[Function]}
              text="Save to cookie"
            />
          </WithStyles(TableCell)>
          <WithStyles(TableCell)
            key="1"
          >
            <WithStyles(ButtonAction)
              clickAction={[Function]}
              text="Load from cookie"
            />
          </WithStyles(TableCell)>
        </WithStyles(TableRow)>
      </WithStyles(TableFooter)>
    </WithStyles(Table)>
  </div>
</div>
`;

exports[`Method viewer renders correctly with no initial value 1`] = `
<div>
  <div
    style={
      Object {
        "display": "initial",
        "left": 0,
        "textAlign": "left",
        "width": "calc(100% - 0px)",
      }
    }
  >
    <div
      style={
        Object {
          "height": "calc(100% - 56px)",
        }
      }
    >
      <t
        height="100%"
        id={
          Array [
            "takes",
            "second",
          ]
        }
        locale={
          Object {
            "brace": Object {
              "curly": Object {
                "cannotWrap": "'{token}' token cannot be wrapped in '{}' curly braces",
                "missingClose": "Open '{' curly brace is missing closing '}' curly brace",
                "missingOpen": "Missing '{' open curly brace",
              },
              "square": Object {
                "cannotWrap": "'{token}' token cannot be wrapped in '[]' square braces",
                "missingClose": "Open '[' square brace is missing closing ']' square brace",
                "missingOpen": "Missing '[' open square brace",
              },
            },
            "format": "{reason} at line {line}",
            "invalidToken": Object {
              "double": "'{token}' token cannot be followed by another '{token}' token",
              "sequence": "'{firstToken}' token cannot be followed by a '{secondToken}' token",
              "unexpected": "Unexpected '{token}' token found",
              "useInstead": "'{badToken}' token is not accepted. Use '{goodToken}' instead",
              "whitelist": "'{firstToken}' token can only follow '{secondToken}' token",
            },
            "key": Object {
              "numberAndLetterMissingQuotes": "Key beginning with number and containing letters must be wrapped by quotes",
              "spaceMissingQuotes": "Key containing space must be wrapped by quotes",
              "unexpectedString": "Unexpected string found at key position",
            },
            "noTrailingOrLeadingComma": "Trailing or leading commas in arrays and objects are not permitted",
            "string": Object {
              "missingClose": "Missing/invalid closing string '{quote}' token",
              "missingOpen": "Missing/invalid opening string '{quote}' token",
              "mustBeWrappedByQuotes": "Strings must be wrapped by quotes",
              "nonAlphanumeric": "Non-alphanemeric token '{token}' is not allowed outside string notation",
              "unexpectedKey": "Unexpected key found at string position",
            },
          }
        }
        onChange={[Function]}
        style={
          Object {
            "body": Object {
              "fontSize": "150%",
            },
          }
        }
        width="100%"
      />
    </div>
    <WithStyles(Table)>
      <WithStyles(TableFooter)>
        <WithStyles(TableRow)>
          <WithStyles(TableCell)
            key="0"
          >
            <WithStyles(ButtonAction)
              clickAction={[Function]}
              text="Save to cookie"
            />
          </WithStyles(TableCell)>
          <WithStyles(TableCell)
            key="1"
          >
            <WithStyles(ButtonAction)
              clickAction={[Function]}
              text="Load from cookie"
            />
          </WithStyles(TableCell)>
        </WithStyles(TableRow)>
      </WithStyles(TableFooter)>
    </WithStyles(Table)>
  </div>
</div>
`;

exports[`Method viewer renders empty div if selected parameter isnt a tree 1`] = `<div />`;
