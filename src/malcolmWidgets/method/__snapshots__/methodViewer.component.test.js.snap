// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Method viewer renders correctly with initial value 1`] = `
<div
  style={
    Object {
      "width": "100%",
    }
  }
>
  <div
    style={
      Object {
        "height": "calc(100% - 56px)",
      }
    }
  >
    <t
      height="100%"
      id={
        Array [
          "takes",
          "second",
        ]
      }
      locale={
        Object {
          "brace": Object {
            "curly": Object {
              "cannotWrap": "'{token}' token cannot be wrapped in '{}' curly braces",
              "missingClose": "Open '{' curly brace is missing closing '}' curly brace",
              "missingOpen": "Missing '{' open curly brace",
            },
            "square": Object {
              "cannotWrap": "'{token}' token cannot be wrapped in '[]' square braces",
              "missingClose": "Open '[' square brace is missing closing ']' square brace",
              "missingOpen": "Missing '[' open square brace",
            },
          },
          "format": "{reason} at line {line}",
          "invalidToken": Object {
            "double": "'{token}' token cannot be followed by another '{token}' token",
            "sequence": "'{firstToken}' token cannot be followed by a '{secondToken}' token",
            "unexpected": "Unexpected '{token}' token found",
            "useInstead": "'{badToken}' token is not accepted. Use '{goodToken}' instead",
            "whitelist": "'{firstToken}' token can only follow '{secondToken}' token",
          },
          "key": Object {
            "numberAndLetterMissingQuotes": "Key beginning with number and containing letters must be wrapped by quotes",
            "spaceMissingQuotes": "Key containing space must be wrapped by quotes",
            "unexpectedString": "Unexpected string found at key position",
          },
          "noTrailingOrLeadingComma": "Trailing or leading commas in arrays and objects are not permitted",
          "string": Object {
            "missingClose": "Missing/invalid closing string '{quote}' token",
            "missingOpen": "Missing/invalid opening string '{quote}' token",
            "mustBeWrappedByQuotes": "Strings must be wrapped by quotes",
            "nonAlphanumeric": "Non-alphanemeric token '{token}' is not allowed outside string notation",
            "unexpectedKey": "Unexpected key found at string position",
          },
        }
      }
      onChange={[Function]}
      placeholder={
        Object {
          "isAString": true,
          "value": "four",
        }
      }
      style={
        Object {
          "body": Object {
            "fontSize": "100%",
          },
        }
      }
      viewOnly={true}
      width="100%"
    />
  </div>
  <WithStyles(Table)>
    <WithStyles(TableFooter)>
      <WithStyles(TableRow) />
    </WithStyles(TableFooter)>
  </WithStyles(Table)>
</div>
`;

exports[`Method viewer renders correctly with no initial value 1`] = `
<div
  style={
    Object {
      "width": "100%",
    }
  }
>
  <div
    style={
      Object {
        "height": "calc(100% - 56px)",
      }
    }
  >
    <t
      height="100%"
      id={
        Array [
          "takes",
          "second",
        ]
      }
      locale={
        Object {
          "brace": Object {
            "curly": Object {
              "cannotWrap": "'{token}' token cannot be wrapped in '{}' curly braces",
              "missingClose": "Open '{' curly brace is missing closing '}' curly brace",
              "missingOpen": "Missing '{' open curly brace",
            },
            "square": Object {
              "cannotWrap": "'{token}' token cannot be wrapped in '[]' square braces",
              "missingClose": "Open '[' square brace is missing closing ']' square brace",
              "missingOpen": "Missing '[' open square brace",
            },
          },
          "format": "{reason} at line {line}",
          "invalidToken": Object {
            "double": "'{token}' token cannot be followed by another '{token}' token",
            "sequence": "'{firstToken}' token cannot be followed by a '{secondToken}' token",
            "unexpected": "Unexpected '{token}' token found",
            "useInstead": "'{badToken}' token is not accepted. Use '{goodToken}' instead",
            "whitelist": "'{firstToken}' token can only follow '{secondToken}' token",
          },
          "key": Object {
            "numberAndLetterMissingQuotes": "Key beginning with number and containing letters must be wrapped by quotes",
            "spaceMissingQuotes": "Key containing space must be wrapped by quotes",
            "unexpectedString": "Unexpected string found at key position",
          },
          "noTrailingOrLeadingComma": "Trailing or leading commas in arrays and objects are not permitted",
          "string": Object {
            "missingClose": "Missing/invalid closing string '{quote}' token",
            "missingOpen": "Missing/invalid opening string '{quote}' token",
            "mustBeWrappedByQuotes": "Strings must be wrapped by quotes",
            "nonAlphanumeric": "Non-alphanemeric token '{token}' is not allowed outside string notation",
            "unexpectedKey": "Unexpected key found at string position",
          },
        }
      }
      onChange={[Function]}
      style={
        Object {
          "body": Object {
            "fontSize": "100%",
          },
        }
      }
      viewOnly={true}
      width="100%"
    />
  </div>
  <WithStyles(Table)>
    <WithStyles(TableFooter)>
      <WithStyles(TableRow) />
    </WithStyles(TableFooter)>
  </WithStyles(Table)>
</div>
`;

exports[`Method viewer renders method param archive if selected parameter isnt a tree 1`] = `
<MethodArchive
  methodArchive={
    Object {
      "alarmState": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "name": "Method",
      "timeStamp": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
      "value": MockCircularBuffer [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ],
    }
  }
  openPanels={
    Object {
      "child": undefined,
      "parent": undefined,
    }
  }
  selectedParam={
    Array [
      "takes",
      "first",
    ]
  }
/>
`;

exports[`Method viewer renders top-level method param archive if no selected parameter 1`] = `
<WithStyles(WidgetTable)
  addRow={[Function]}
  attribute={
    Object {
      "calculated": Object {},
      "raw": Object {
        "meta": Object {
          "elements": Object {
            "alarm": Object {
              "label": "Alarm state",
              "tags": Array [
                "info:alarm",
              ],
            },
            "copyParams": Object {
              "label": "Reuse run params",
              "tags": Array [
                "info:button",
              ],
            },
            "postTime": Object {
              "label": "Time run",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "returnStatus": Object {
              "label": "Return Status",
              "tags": Array [
                "widget:textupdate",
              ],
            },
            "returnTime": Object {
              "label": "Time results received",
              "tags": Array [
                "widget:textupdate",
              ],
            },
          },
        },
        "value": Object {
          "alarm": Array [],
          "copyParams": Array [],
          "postTime": Array [],
          "returnStatus": Array [],
          "returnTime": Array [],
        },
      },
    }
  }
  eventHandler={[Function]}
  hideInfo={true}
  infoClickHandler={[Function]}
  rowClickHandler={[Function]}
  setFlag={[Function]}
/>
`;
