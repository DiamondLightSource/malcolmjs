// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`virtualized table widget row renders correctly 1`] = `
<div>
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Number of times the line will repeat",
        "dtype": "uint16",
        "label": "Repeats",
        "tags": Array [
          "widget:textinput",
        ],
        "typeid": "malcolm:core/NumberArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:textinput"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 0,
        "label": "repeats",
        "row": 0,
      }
    }
    value={0}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "choices": Array [
          "Immediate",
          "BITA=0",
          "BITA=1",
          "BITB=0",
          "BITB=1",
          "BITC=0",
          "BITC=1",
          "POSA>=POSITION",
          "POSA<=POSITION",
          "POSB>=POSITION",
          "POSB<=POSITION",
          "POSC>=POSITION",
          "POSC<=POSITION",
        ],
        "description": "The trigger condition to start the phases",
        "label": "Trigger",
        "tags": Array [
          "widget:combo",
        ],
        "typeid": "malcolm:core/ChoiceArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:combo"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 1,
        "label": "trigger",
        "row": 0,
      }
    }
    value="POSC>=POSITION"
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "The position that can be used in trigger condition",
        "dtype": "uint32",
        "label": "Position",
        "tags": Array [
          "widget:textinput",
        ],
        "typeid": "malcolm:core/NumberArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:textinput"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 2,
        "label": "position",
        "row": 0,
      }
    }
    value={0}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "The time the optional phase 1 should take",
        "dtype": "uint32",
        "label": "Time1",
        "tags": Array [
          "widget:textinput",
        ],
        "typeid": "malcolm:core/NumberArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:textinput"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 3,
        "label": "time1",
        "row": 0,
      }
    }
    value={0}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output A value during phase 1",
        "label": "Outa1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 4,
        "label": "outa1",
        "row": 0,
      }
    }
    value={true}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output B value during phase 1",
        "label": "Outb1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 5,
        "label": "outb1",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output C value during phase 1",
        "label": "Outc1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 6,
        "label": "outc1",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output D value during phase 1",
        "label": "Outd1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 7,
        "label": "outd1",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output E value during phase 1",
        "label": "Oute1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 8,
        "label": "oute1",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output F value during phase 1",
        "label": "Outf1",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 9,
        "label": "outf1",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "The time the mandatory phase 2 should take",
        "dtype": "uint32",
        "label": "Time2",
        "tags": Array [
          "widget:textinput",
        ],
        "typeid": "malcolm:core/NumberArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:textinput"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 10,
        "label": "time2",
        "row": 0,
      }
    }
    value={0}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output A value during phase 2",
        "label": "Outa2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 11,
        "label": "outa2",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output B value during phase 2",
        "label": "Outb2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 12,
        "label": "outb2",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output C value during phase 2",
        "label": "Outc2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 13,
        "label": "outc2",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output D value during phase 2",
        "label": "Outd2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 14,
        "label": "outd2",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output E value during phase 2",
        "label": "Oute2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 15,
        "label": "oute2",
        "row": 0,
      }
    }
    value={false}
  />
  <WithTheme(TableWidgetSelector)
    columnMeta={
      Object {
        "description": "Output F value during phase 2",
        "label": "Outf2",
        "tags": Array [
          "widget:checkbox",
        ],
        "typeid": "malcolm:core/BooleanArrayMeta:1.0",
        "writeable": true,
      }
    }
    columnWidgetTag="widget:checkbox"
    rowPath={
      Object {
        "attributePath": Array [
          "test1",
          "layout",
        ],
        "column": 16,
        "label": "outf2",
        "row": 0,
      }
    }
    value={false}
  />
  <AlarmCell
    classes={Object {}}
    flags={
      Object {
        "rows": Array [
          Object {},
          Object {},
          Object {},
          Object {},
          Object {},
        ],
        "table": Object {
          "dirty": false,
          "fresh": true,
          "timeStamp": Object {
            "nanoseconds": 0,
            "secondsPastEpoch": 0,
            "typeid": "time_t",
            "userTag": 0,
          },
        },
      }
    }
    infoClickHandler={[Function]}
    path={
      Array [
        "test1",
        "layout",
      ]
    }
    row={0}
  />
</div>
`;

exports[`virtualized table widget table renders correctly with no selected row 1`] = `
<WithStyles(WidgetTable)
  addRow={[Function]}
  attribute={
    Object {
      "calculated": Object {
        "alarms": Object {},
        "dirty": false,
        "name": "layout",
        "path": Array [
          "test1",
          "layout",
        ],
      },
      "raw": Object {
        "alarm": Object {
          "message": "",
          "severity": 0,
          "status": 0,
          "typeid": "alarm_t",
        },
        "labels": Array [
          "Repeats",
          "Trigger",
          "Position",
          "Time1",
          "Outa1",
          "Outb1",
          "Outc1",
          "Outd1",
          "Oute1",
          "Outf1",
          "Time2",
          "Outa2",
          "Outb2",
          "Outc2",
          "Outd2",
          "Oute2",
          "Outf2",
        ],
        "meta": Object {
          "description": "Sequencer table of lines",
          "elements": Object {
            "outa1": Object {
              "description": "Output A value during phase 1",
              "label": "Outa1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outa2": Object {
              "description": "Output A value during phase 2",
              "label": "Outa2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outb1": Object {
              "description": "Output B value during phase 1",
              "label": "Outb1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outb2": Object {
              "description": "Output B value during phase 2",
              "label": "Outb2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outc1": Object {
              "description": "Output C value during phase 1",
              "label": "Outc1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outc2": Object {
              "description": "Output C value during phase 2",
              "label": "Outc2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outd1": Object {
              "description": "Output D value during phase 1",
              "label": "Outd1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outd2": Object {
              "description": "Output D value during phase 2",
              "label": "Outd2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "oute1": Object {
              "description": "Output E value during phase 1",
              "label": "Oute1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "oute2": Object {
              "description": "Output E value during phase 2",
              "label": "Oute2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outf1": Object {
              "description": "Output F value during phase 1",
              "label": "Outf1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outf2": Object {
              "description": "Output F value during phase 2",
              "label": "Outf2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "position": Object {
              "description": "The position that can be used in trigger condition",
              "dtype": "uint32",
              "label": "Position",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "repeats": Object {
              "description": "Number of times the line will repeat",
              "dtype": "uint16",
              "label": "Repeats",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "time1": Object {
              "description": "The time the optional phase 1 should take",
              "dtype": "uint32",
              "label": "Time1",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "time2": Object {
              "description": "The time the mandatory phase 2 should take",
              "dtype": "uint32",
              "label": "Time2",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "trigger": Object {
              "choices": Array [
                "Immediate",
                "BITA=0",
                "BITA=1",
                "BITB=0",
                "BITB=1",
                "BITC=0",
                "BITC=1",
                "POSA>=POSITION",
                "POSA<=POSITION",
                "POSB>=POSITION",
                "POSB<=POSITION",
                "POSC>=POSITION",
                "POSC<=POSITION",
              ],
              "description": "The trigger condition to start the phases",
              "label": "Trigger",
              "tags": Array [
                "widget:combo",
              ],
              "typeid": "malcolm:core/ChoiceArrayMeta:1.0",
              "writeable": true,
            },
          },
          "label": "Table",
          "tags": Array [
            "widget:table",
            "group:parameters",
            "config:1",
          ],
          "typeid": "malcolm:core/TableMeta:1.0",
          "writeable": true,
        },
        "timeStamp": Object {
          "nanoseconds": 0,
          "secondsPastEpoch": 0,
          "typeid": "time_t",
          "userTag": 0,
        },
        "typeid": "epics:nt/NTTable:1.0",
        "value": Object {
          "outa1": Array [
            true,
            false,
            false,
            false,
            false,
          ],
          "outa2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "outb1": Array [
            false,
            true,
            false,
            false,
            false,
          ],
          "outb2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "outc1": Array [
            false,
            false,
            true,
            false,
            false,
          ],
          "outc2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "outd1": Array [
            false,
            false,
            false,
            true,
            false,
          ],
          "outd2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "oute1": Array [
            false,
            false,
            false,
            false,
            true,
          ],
          "oute2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "outf1": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "outf2": Array [
            false,
            false,
            false,
            false,
            false,
          ],
          "position": Array [
            0,
            0,
            0,
            0,
            0,
          ],
          "repeats": Array [
            0,
            0,
            0,
            0,
            0,
          ],
          "time1": Array [
            0,
            0,
            0,
            0,
            0,
          ],
          "time2": Array [
            0,
            0,
            0,
            0,
            0,
          ],
          "trigger": Array [
            "POSC>=POSITION",
            "BITB=1",
            "Immediate",
            "POSB<=POSITION",
            "POSA<=POSITION",
          ],
          "typeid": "malcolm:core/Table:1.0",
        },
      },
    }
  }
  eventHandler={[Function]}
  localState={
    Object {
      "flags": Object {
        "rows": Array [
          Object {},
          Object {},
          Object {},
          Object {},
          Object {},
        ],
        "table": Object {
          "dirty": false,
          "fresh": true,
          "timeStamp": Object {
            "nanoseconds": 0,
            "secondsPastEpoch": 0,
            "typeid": "time_t",
            "userTag": 0,
          },
        },
      },
      "labels": Array [
        "repeats",
        "trigger",
        "position",
        "time1",
        "outa1",
        "outb1",
        "outc1",
        "outd1",
        "oute1",
        "outf1",
        "time2",
        "outa2",
        "outb2",
        "outc2",
        "outd2",
        "oute2",
        "outf2",
      ],
      "meta": Object {
        "description": "Sequencer table of lines",
        "elements": Object {
          "outa1": Object {
            "description": "Output A value during phase 1",
            "label": "Outa1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outa2": Object {
            "description": "Output A value during phase 2",
            "label": "Outa2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outb1": Object {
            "description": "Output B value during phase 1",
            "label": "Outb1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outb2": Object {
            "description": "Output B value during phase 2",
            "label": "Outb2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outc1": Object {
            "description": "Output C value during phase 1",
            "label": "Outc1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outc2": Object {
            "description": "Output C value during phase 2",
            "label": "Outc2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outd1": Object {
            "description": "Output D value during phase 1",
            "label": "Outd1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outd2": Object {
            "description": "Output D value during phase 2",
            "label": "Outd2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "oute1": Object {
            "description": "Output E value during phase 1",
            "label": "Oute1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "oute2": Object {
            "description": "Output E value during phase 2",
            "label": "Oute2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outf1": Object {
            "description": "Output F value during phase 1",
            "label": "Outf1",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "outf2": Object {
            "description": "Output F value during phase 2",
            "label": "Outf2",
            "tags": Array [
              "widget:checkbox",
            ],
            "typeid": "malcolm:core/BooleanArrayMeta:1.0",
            "writeable": true,
          },
          "position": Object {
            "description": "The position that can be used in trigger condition",
            "dtype": "uint32",
            "label": "Position",
            "tags": Array [
              "widget:textinput",
            ],
            "typeid": "malcolm:core/NumberArrayMeta:1.0",
            "writeable": true,
          },
          "repeats": Object {
            "description": "Number of times the line will repeat",
            "dtype": "uint16",
            "label": "Repeats",
            "tags": Array [
              "widget:textinput",
            ],
            "typeid": "malcolm:core/NumberArrayMeta:1.0",
            "writeable": true,
          },
          "time1": Object {
            "description": "The time the optional phase 1 should take",
            "dtype": "uint32",
            "label": "Time1",
            "tags": Array [
              "widget:textinput",
            ],
            "typeid": "malcolm:core/NumberArrayMeta:1.0",
            "writeable": true,
          },
          "time2": Object {
            "description": "The time the mandatory phase 2 should take",
            "dtype": "uint32",
            "label": "Time2",
            "tags": Array [
              "widget:textinput",
            ],
            "typeid": "malcolm:core/NumberArrayMeta:1.0",
            "writeable": true,
          },
          "trigger": Object {
            "choices": Array [
              "Immediate",
              "BITA=0",
              "BITA=1",
              "BITB=0",
              "BITB=1",
              "BITC=0",
              "BITC=1",
              "POSA>=POSITION",
              "POSA<=POSITION",
              "POSB>=POSITION",
              "POSB<=POSITION",
              "POSC>=POSITION",
              "POSC<=POSITION",
            ],
            "description": "The trigger condition to start the phases",
            "label": "Trigger",
            "tags": Array [
              "widget:combo",
            ],
            "typeid": "malcolm:core/ChoiceArrayMeta:1.0",
            "writeable": true,
          },
        },
        "label": "Table",
        "tags": Array [
          "widget:table",
          "group:parameters",
          "config:1",
        ],
        "typeid": "malcolm:core/TableMeta:1.0",
        "writeable": true,
      },
      "value": Array [
        Object {
          "outa1": true,
          "outa2": false,
          "outb1": false,
          "outb2": false,
          "outc1": false,
          "outc2": false,
          "outd1": false,
          "outd2": false,
          "oute1": false,
          "oute2": false,
          "outf1": false,
          "outf2": false,
          "position": 0,
          "repeats": 0,
          "time1": 0,
          "time2": 0,
          "trigger": "POSC>=POSITION",
        },
        Object {
          "outa1": false,
          "outa2": false,
          "outb1": true,
          "outb2": false,
          "outc1": false,
          "outc2": false,
          "outd1": false,
          "outd2": false,
          "oute1": false,
          "oute2": false,
          "outf1": false,
          "outf2": false,
          "position": 0,
          "repeats": 0,
          "time1": 0,
          "time2": 0,
          "trigger": "BITB=1",
        },
        Object {
          "outa1": false,
          "outa2": false,
          "outb1": false,
          "outb2": false,
          "outc1": true,
          "outc2": false,
          "outd1": false,
          "outd2": false,
          "oute1": false,
          "oute2": false,
          "outf1": false,
          "outf2": false,
          "position": 0,
          "repeats": 0,
          "time1": 0,
          "time2": 0,
          "trigger": "Immediate",
        },
        Object {
          "outa1": false,
          "outa2": false,
          "outb1": false,
          "outb2": false,
          "outc1": false,
          "outc2": false,
          "outd1": true,
          "outd2": false,
          "oute1": false,
          "oute2": false,
          "outf1": false,
          "outf2": false,
          "position": 0,
          "repeats": 0,
          "time1": 0,
          "time2": 0,
          "trigger": "POSB<=POSITION",
        },
        Object {
          "outa1": false,
          "outa2": false,
          "outb1": false,
          "outb2": false,
          "outc1": false,
          "outc2": false,
          "outd1": false,
          "outd2": false,
          "oute1": true,
          "oute2": false,
          "outf1": false,
          "outf2": false,
          "position": 0,
          "repeats": 0,
          "time1": 0,
          "time2": 0,
          "trigger": "POSA<=POSITION",
        },
      ],
    }
  }
  setFlag={[Function]}
>
  <WidgetTable
    addRow={[Function]}
    attribute={
      Object {
        "calculated": Object {
          "alarms": Object {},
          "dirty": false,
          "name": "layout",
          "path": Array [
            "test1",
            "layout",
          ],
        },
        "raw": Object {
          "alarm": Object {
            "message": "",
            "severity": 0,
            "status": 0,
            "typeid": "alarm_t",
          },
          "labels": Array [
            "Repeats",
            "Trigger",
            "Position",
            "Time1",
            "Outa1",
            "Outb1",
            "Outc1",
            "Outd1",
            "Oute1",
            "Outf1",
            "Time2",
            "Outa2",
            "Outb2",
            "Outc2",
            "Outd2",
            "Oute2",
            "Outf2",
          ],
          "meta": Object {
            "description": "Sequencer table of lines",
            "elements": Object {
              "outa1": Object {
                "description": "Output A value during phase 1",
                "label": "Outa1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outa2": Object {
                "description": "Output A value during phase 2",
                "label": "Outa2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outb1": Object {
                "description": "Output B value during phase 1",
                "label": "Outb1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outb2": Object {
                "description": "Output B value during phase 2",
                "label": "Outb2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outc1": Object {
                "description": "Output C value during phase 1",
                "label": "Outc1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outc2": Object {
                "description": "Output C value during phase 2",
                "label": "Outc2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outd1": Object {
                "description": "Output D value during phase 1",
                "label": "Outd1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outd2": Object {
                "description": "Output D value during phase 2",
                "label": "Outd2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "oute1": Object {
                "description": "Output E value during phase 1",
                "label": "Oute1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "oute2": Object {
                "description": "Output E value during phase 2",
                "label": "Oute2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outf1": Object {
                "description": "Output F value during phase 1",
                "label": "Outf1",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "outf2": Object {
                "description": "Output F value during phase 2",
                "label": "Outf2",
                "tags": Array [
                  "widget:checkbox",
                ],
                "typeid": "malcolm:core/BooleanArrayMeta:1.0",
                "writeable": true,
              },
              "position": Object {
                "description": "The position that can be used in trigger condition",
                "dtype": "uint32",
                "label": "Position",
                "tags": Array [
                  "widget:textinput",
                ],
                "typeid": "malcolm:core/NumberArrayMeta:1.0",
                "writeable": true,
              },
              "repeats": Object {
                "description": "Number of times the line will repeat",
                "dtype": "uint16",
                "label": "Repeats",
                "tags": Array [
                  "widget:textinput",
                ],
                "typeid": "malcolm:core/NumberArrayMeta:1.0",
                "writeable": true,
              },
              "time1": Object {
                "description": "The time the optional phase 1 should take",
                "dtype": "uint32",
                "label": "Time1",
                "tags": Array [
                  "widget:textinput",
                ],
                "typeid": "malcolm:core/NumberArrayMeta:1.0",
                "writeable": true,
              },
              "time2": Object {
                "description": "The time the mandatory phase 2 should take",
                "dtype": "uint32",
                "label": "Time2",
                "tags": Array [
                  "widget:textinput",
                ],
                "typeid": "malcolm:core/NumberArrayMeta:1.0",
                "writeable": true,
              },
              "trigger": Object {
                "choices": Array [
                  "Immediate",
                  "BITA=0",
                  "BITA=1",
                  "BITB=0",
                  "BITB=1",
                  "BITC=0",
                  "BITC=1",
                  "POSA>=POSITION",
                  "POSA<=POSITION",
                  "POSB>=POSITION",
                  "POSB<=POSITION",
                  "POSC>=POSITION",
                  "POSC<=POSITION",
                ],
                "description": "The trigger condition to start the phases",
                "label": "Trigger",
                "tags": Array [
                  "widget:combo",
                ],
                "typeid": "malcolm:core/ChoiceArrayMeta:1.0",
                "writeable": true,
              },
            },
            "label": "Table",
            "tags": Array [
              "widget:table",
              "group:parameters",
              "config:1",
            ],
            "typeid": "malcolm:core/TableMeta:1.0",
            "writeable": true,
          },
          "timeStamp": Object {
            "nanoseconds": 0,
            "secondsPastEpoch": 0,
            "typeid": "time_t",
            "userTag": 0,
          },
          "typeid": "epics:nt/NTTable:1.0",
          "value": Object {
            "outa1": Array [
              true,
              false,
              false,
              false,
              false,
            ],
            "outa2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "outb1": Array [
              false,
              true,
              false,
              false,
              false,
            ],
            "outb2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "outc1": Array [
              false,
              false,
              true,
              false,
              false,
            ],
            "outc2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "outd1": Array [
              false,
              false,
              false,
              true,
              false,
            ],
            "outd2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "oute1": Array [
              false,
              false,
              false,
              false,
              true,
            ],
            "oute2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "outf1": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "outf2": Array [
              false,
              false,
              false,
              false,
              false,
            ],
            "position": Array [
              0,
              0,
              0,
              0,
              0,
            ],
            "repeats": Array [
              0,
              0,
              0,
              0,
              0,
            ],
            "time1": Array [
              0,
              0,
              0,
              0,
              0,
            ],
            "time2": Array [
              0,
              0,
              0,
              0,
              0,
            ],
            "trigger": Array [
              "POSC>=POSITION",
              "BITB=1",
              "Immediate",
              "POSB<=POSITION",
              "POSA<=POSITION",
            ],
            "typeid": "malcolm:core/Table:1.0",
          },
        },
      }
    }
    classes={
      Object {
        "addRowButton": "WidgetTable-addRowButton-6",
        "button": "WidgetTable-button-5",
        "header": "WidgetTable-header-1",
        "incompleteRowFormat": "WidgetTable-incompleteRowFormat-2",
        "selectedRow": "WidgetTable-selectedRow-3",
        "textBody": "WidgetTable-textBody-4",
      }
    }
    eventHandler={[Function]}
    hideInfo={false}
    localState={
      Object {
        "flags": Object {
          "rows": Array [
            Object {},
            Object {},
            Object {},
            Object {},
            Object {},
          ],
          "table": Object {
            "dirty": false,
            "fresh": true,
            "timeStamp": Object {
              "nanoseconds": 0,
              "secondsPastEpoch": 0,
              "typeid": "time_t",
              "userTag": 0,
            },
          },
        },
        "labels": Array [
          "repeats",
          "trigger",
          "position",
          "time1",
          "outa1",
          "outb1",
          "outc1",
          "outd1",
          "oute1",
          "outf1",
          "time2",
          "outa2",
          "outb2",
          "outc2",
          "outd2",
          "oute2",
          "outf2",
        ],
        "meta": Object {
          "description": "Sequencer table of lines",
          "elements": Object {
            "outa1": Object {
              "description": "Output A value during phase 1",
              "label": "Outa1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outa2": Object {
              "description": "Output A value during phase 2",
              "label": "Outa2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outb1": Object {
              "description": "Output B value during phase 1",
              "label": "Outb1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outb2": Object {
              "description": "Output B value during phase 2",
              "label": "Outb2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outc1": Object {
              "description": "Output C value during phase 1",
              "label": "Outc1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outc2": Object {
              "description": "Output C value during phase 2",
              "label": "Outc2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outd1": Object {
              "description": "Output D value during phase 1",
              "label": "Outd1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outd2": Object {
              "description": "Output D value during phase 2",
              "label": "Outd2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "oute1": Object {
              "description": "Output E value during phase 1",
              "label": "Oute1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "oute2": Object {
              "description": "Output E value during phase 2",
              "label": "Oute2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outf1": Object {
              "description": "Output F value during phase 1",
              "label": "Outf1",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "outf2": Object {
              "description": "Output F value during phase 2",
              "label": "Outf2",
              "tags": Array [
                "widget:checkbox",
              ],
              "typeid": "malcolm:core/BooleanArrayMeta:1.0",
              "writeable": true,
            },
            "position": Object {
              "description": "The position that can be used in trigger condition",
              "dtype": "uint32",
              "label": "Position",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "repeats": Object {
              "description": "Number of times the line will repeat",
              "dtype": "uint16",
              "label": "Repeats",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "time1": Object {
              "description": "The time the optional phase 1 should take",
              "dtype": "uint32",
              "label": "Time1",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "time2": Object {
              "description": "The time the mandatory phase 2 should take",
              "dtype": "uint32",
              "label": "Time2",
              "tags": Array [
                "widget:textinput",
              ],
              "typeid": "malcolm:core/NumberArrayMeta:1.0",
              "writeable": true,
            },
            "trigger": Object {
              "choices": Array [
                "Immediate",
                "BITA=0",
                "BITA=1",
                "BITB=0",
                "BITB=1",
                "BITC=0",
                "BITC=1",
                "POSA>=POSITION",
                "POSA<=POSITION",
                "POSB>=POSITION",
                "POSB<=POSITION",
                "POSC>=POSITION",
                "POSC<=POSITION",
              ],
              "description": "The trigger condition to start the phases",
              "label": "Trigger",
              "tags": Array [
                "widget:combo",
              ],
              "typeid": "malcolm:core/ChoiceArrayMeta:1.0",
              "writeable": true,
            },
          },
          "label": "Table",
          "tags": Array [
            "widget:table",
            "group:parameters",
            "config:1",
          ],
          "typeid": "malcolm:core/TableMeta:1.0",
          "writeable": true,
        },
        "value": Array [
          Object {
            "outa1": true,
            "outa2": false,
            "outb1": false,
            "outb2": false,
            "outc1": false,
            "outc2": false,
            "outd1": false,
            "outd2": false,
            "oute1": false,
            "oute2": false,
            "outf1": false,
            "outf2": false,
            "position": 0,
            "repeats": 0,
            "time1": 0,
            "time2": 0,
            "trigger": "POSC>=POSITION",
          },
          Object {
            "outa1": false,
            "outa2": false,
            "outb1": true,
            "outb2": false,
            "outc1": false,
            "outc2": false,
            "outd1": false,
            "outd2": false,
            "oute1": false,
            "oute2": false,
            "outf1": false,
            "outf2": false,
            "position": 0,
            "repeats": 0,
            "time1": 0,
            "time2": 0,
            "trigger": "BITB=1",
          },
          Object {
            "outa1": false,
            "outa2": false,
            "outb1": false,
            "outb2": false,
            "outc1": true,
            "outc2": false,
            "outd1": false,
            "outd2": false,
            "oute1": false,
            "oute2": false,
            "outf1": false,
            "outf2": false,
            "position": 0,
            "repeats": 0,
            "time1": 0,
            "time2": 0,
            "trigger": "Immediate",
          },
          Object {
            "outa1": false,
            "outa2": false,
            "outb1": false,
            "outb2": false,
            "outc1": false,
            "outc2": false,
            "outd1": true,
            "outd2": false,
            "oute1": false,
            "oute2": false,
            "outf1": false,
            "outf2": false,
            "position": 0,
            "repeats": 0,
            "time1": 0,
            "time2": 0,
            "trigger": "POSB<=POSITION",
          },
          Object {
            "outa1": false,
            "outa2": false,
            "outb1": false,
            "outb2": false,
            "outc1": false,
            "outc2": false,
            "outd1": false,
            "outd2": false,
            "oute1": true,
            "oute2": false,
            "outf1": false,
            "outf2": false,
            "position": 0,
            "repeats": 0,
            "time1": 0,
            "time2": 0,
            "trigger": "POSA<=POSITION",
          },
        ],
      }
    }
    setFlag={[Function]}
    showFooter={false}
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "hover": "rgba(0, 0, 0, 0.08)",
            "hoverOpacity": 0.08,
            "selected": "rgba(0, 0, 0, 0.14)",
          },
          "augmentColor": [Function],
          "background": Object {
            "default": "#fafafa",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "#303f9f",
            "light": "#7986cb",
            "main": "#3f51b5",
          },
          "secondary": Object {
            "contrastText": "#fff",
            "dark": "#c51162",
            "light": "#ff4081",
            "main": "#f50057",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
          "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
          "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
          "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
          "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
          "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
          "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
          "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
          "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
          "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
          "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
          "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
          "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
          "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
          "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
          "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
          "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
          "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
          "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
          "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
          "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
          "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
          "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
          "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": Object {
          "unit": 8,
        },
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body1": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "lineHeight": "1.46429em",
          },
          "body2": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 500,
            "lineHeight": "1.71429em",
          },
          "button": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 500,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "color": "rgba(0, 0, 0, 0.54)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "lineHeight": "1.375em",
          },
          "display1": Object {
            "color": "rgba(0, 0, 0, 0.54)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "2.125rem",
            "fontWeight": 400,
            "lineHeight": "1.20588em",
          },
          "display2": Object {
            "color": "rgba(0, 0, 0, 0.54)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "2.8125rem",
            "fontWeight": 400,
            "lineHeight": "1.13333em",
            "marginLeft": "-.02em",
          },
          "display3": Object {
            "color": "rgba(0, 0, 0, 0.54)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "3.5rem",
            "fontWeight": 400,
            "letterSpacing": "-.02em",
            "lineHeight": "1.30357em",
            "marginLeft": "-.02em",
          },
          "display4": Object {
            "color": "rgba(0, 0, 0, 0.54)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "7rem",
            "fontWeight": 300,
            "letterSpacing": "-.04em",
            "lineHeight": "1.14286em",
            "marginLeft": "-.04em",
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightLight": 300,
          "fontWeightMedium": 500,
          "fontWeightRegular": 400,
          "headline": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1.5rem",
            "fontWeight": 400,
            "lineHeight": "1.35417em",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subheading": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "lineHeight": "1.5em",
          },
          "title": Object {
            "color": "rgba(0, 0, 0, 0.87)",
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1.3125rem",
            "fontWeight": 500,
            "lineHeight": "1.16667em",
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "tooltip": 1500,
        },
      }
    }
  >
    <div
      data-cy="table"
      onClick={[Function]}
      role="presentation"
      style={
        Object {
          "height": "100%",
          "position": "relative",
          "width": "100%",
        }
      }
    >
      <div
        style={
          Object {
            "height": "100%",
            "overflowX": "auto",
            "overflowY": "hidden",
            "width": "100%",
          }
        }
      >
        <AutoSizer
          disableHeight={false}
          disableWidth={false}
          onResize={[Function]}
          style={Object {}}
        >
          <div
            style={
              Object {
                "height": 0,
                "overflow": "visible",
                "width": 0,
              }
            }
          >
            <div>
              <Table
                disableHeader={false}
                estimatedRowSize={30}
                headerClassName="WidgetTable-header-1"
                headerHeight={36}
                headerRowRenderer={[Function]}
                headerStyle={Object {}}
                height={0}
                noRowsRenderer={[Function]}
                onHeaderClick={[Function]}
                onRowClick={[Function]}
                onRowsRendered={[Function]}
                onScroll={[Function]}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                rowClassName={[Function]}
                rowCount={7}
                rowGetter={[Function]}
                rowHeight={36}
                rowRenderer={[Function]}
                rowStyle={Object {}}
                scrollToAlignment="auto"
                scrollToIndex={-1}
                style={Object {}}
                width={1644}
              >
                <div
                  className="ReactVirtualized__Table"
                  role="grid"
                  style={Object {}}
                >
                  <div
                    className="ReactVirtualized__Table__headerRow WidgetTable-header-1"
                    role="row"
                    style={
                      Object {
                        "height": 36,
                        "overflow": "hidden",
                        "paddingRight": 0,
                        "width": 1644,
                      }
                    }
                  >
                    <div
                      aria-label="alarmState"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col0"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 36px",
                          "flex": "0 1 36px",
                          "msFlex": "0 1 36px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title=""
                      />
                    </div>
                    <div
                      aria-label="Repeats"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col1"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 180px",
                          "flex": "0 1 180px",
                          "msFlex": "0 1 180px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Repeats"
                      >
                        Repeats
                      </span>
                    </div>
                    <div
                      aria-label="Trigger"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col2"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 180px",
                          "flex": "0 1 180px",
                          "msFlex": "0 1 180px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Trigger"
                      >
                        Trigger
                      </span>
                    </div>
                    <div
                      aria-label="Position"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col3"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 180px",
                          "flex": "0 1 180px",
                          "msFlex": "0 1 180px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Position"
                      >
                        Position
                      </span>
                    </div>
                    <div
                      aria-label="Time1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col4"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 180px",
                          "flex": "0 1 180px",
                          "msFlex": "0 1 180px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Time1"
                      >
                        Time1
                      </span>
                    </div>
                    <div
                      aria-label="Outa1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col5"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outa1"
                      >
                        Outa1
                      </span>
                    </div>
                    <div
                      aria-label="Outb1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col6"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outb1"
                      >
                        Outb1
                      </span>
                    </div>
                    <div
                      aria-label="Outc1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col7"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outc1"
                      >
                        Outc1
                      </span>
                    </div>
                    <div
                      aria-label="Outd1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col8"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outd1"
                      >
                        Outd1
                      </span>
                    </div>
                    <div
                      aria-label="Oute1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col9"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Oute1"
                      >
                        Oute1
                      </span>
                    </div>
                    <div
                      aria-label="Outf1"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col10"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outf1"
                      >
                        Outf1
                      </span>
                    </div>
                    <div
                      aria-label="Time2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col11"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 180px",
                          "flex": "0 1 180px",
                          "msFlex": "0 1 180px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Time2"
                      >
                        Time2
                      </span>
                    </div>
                    <div
                      aria-label="Outa2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col12"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outa2"
                      >
                        Outa2
                      </span>
                    </div>
                    <div
                      aria-label="Outb2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col13"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outb2"
                      >
                        Outb2
                      </span>
                    </div>
                    <div
                      aria-label="Outc2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col14"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outc2"
                      >
                        Outc2
                      </span>
                    </div>
                    <div
                      aria-label="Outd2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col15"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outd2"
                      >
                        Outd2
                      </span>
                    </div>
                    <div
                      aria-label="Oute2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col16"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Oute2"
                      >
                        Oute2
                      </span>
                    </div>
                    <div
                      aria-label="Outf2"
                      className="ReactVirtualized__Table__headerColumn WidgetTable-header-1"
                      key="Header-Col17"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      role="columnheader"
                      style={
                        Object {
                          "WebkitFlex": "0 1 59px",
                          "flex": "0 1 59px",
                          "msFlex": "0 1 59px",
                        }
                      }
                      tabIndex={0}
                    >
                      <span
                        className="ReactVirtualized__Table__headerTruncatedText"
                        key="label"
                        title="Outf2"
                      >
                        Outf2
                      </span>
                    </div>
                  </div>
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={true}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    className="ReactVirtualized__Table__Grid"
                    columnCount={1}
                    columnWidth={1644}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    disableHeader={false}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    headerClassName="WidgetTable-header-1"
                    headerHeight={36}
                    headerRowRenderer={[Function]}
                    headerStyle={Object {}}
                    height={-36}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    noRowsRenderer={[Function]}
                    onHeaderClick={[Function]}
                    onRowClick={[Function]}
                    onRowsRendered={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="rowgroup"
                    rowClassName={[Function]}
                    rowCount={7}
                    rowGetter={[Function]}
                    rowHeight={36}
                    rowRenderer={[Function]}
                    rowStyle={Object {}}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToIndex={-1}
                    scrollToRow={-1}
                    scrollbarWidth={0}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "overflowX": "hidden",
                      }
                    }
                    tabIndex={0}
                    width={1644}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid ReactVirtualized__Table__Grid"
                      onScroll={[Function]}
                      role="rowgroup"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": -36,
                          "overflowX": "hidden",
                          "overflowY": "auto",
                          "position": "relative",
                          "width": 1644,
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
              </Table>
            </div>
          </div>
        </AutoSizer>
      </div>
      <WithStyles(Tooltip)
        id="1"
        placement="center"
        title="Add row to bottom of table"
      >
        <Tooltip
          TransitionComponent={[Function]}
          classes={
            Object {
              "popper": "MuiTooltip-popper-7",
              "tooltip": "MuiTooltip-tooltip-8",
              "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom-13",
              "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft-10",
              "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight-11",
              "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop-12",
              "touch": "MuiTooltip-touch-9",
            }
          }
          disableFocusListener={false}
          disableHoverListener={false}
          disableTouchListener={false}
          enterDelay={0}
          enterTouchDelay={1000}
          id="1"
          leaveDelay={0}
          leaveTouchDelay={1500}
          placement="center"
          theme={
            Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 960,
                  "sm": 600,
                  "xl": 1920,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "hover": "rgba(0, 0, 0, 0.08)",
                  "hoverOpacity": 0.08,
                  "selected": "rgba(0, 0, 0, 0.14)",
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "#d32f2f",
                  "light": "#e57373",
                  "main": "#f44336",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#f5f5f5",
                  "200": "#eeeeee",
                  "300": "#e0e0e0",
                  "400": "#bdbdbd",
                  "50": "#fafafa",
                  "500": "#9e9e9e",
                  "600": "#757575",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "primary": Object {
                  "contrastText": "#fff",
                  "dark": "#303f9f",
                  "light": "#7986cb",
                  "main": "#3f51b5",
                },
                "secondary": Object {
                  "contrastText": "#fff",
                  "dark": "#c51162",
                  "light": "#ff4081",
                  "main": "#f50057",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
              },
              "props": Object {},
              "shadows": Array [
                "none",
                "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
                "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
                "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
                "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
                "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
                "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
                "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
                "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
                "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
                "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
                "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
                "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
                "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
                "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
                "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
                "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
                "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
                "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
                "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
                "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
                "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
                "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
                "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
                "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": Object {
                "unit": 8,
              },
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "lineHeight": "1.46429em",
                },
                "body2": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": "1.71429em",
                },
                "button": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": "1.375em",
                },
                "display1": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "lineHeight": "1.20588em",
                },
                "display2": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.8125rem",
                  "fontWeight": 400,
                  "lineHeight": "1.13333em",
                  "marginLeft": "-.02em",
                },
                "display3": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3.5rem",
                  "fontWeight": 400,
                  "letterSpacing": "-.02em",
                  "lineHeight": "1.30357em",
                  "marginLeft": "-.02em",
                },
                "display4": Object {
                  "color": "rgba(0, 0, 0, 0.54)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "7rem",
                  "fontWeight": 300,
                  "letterSpacing": "-.04em",
                  "lineHeight": "1.14286em",
                  "marginLeft": "-.04em",
                },
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": 14,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "headline": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": "1.35417em",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subheading": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": "1.5em",
                },
                "title": Object {
                  "color": "rgba(0, 0, 0, 0.87)",
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.3125rem",
                  "fontWeight": 500,
                  "lineHeight": "1.16667em",
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "tooltip": 1500,
              },
            }
          }
          title="Add row to bottom of table"
        >
          <RootRef
            rootRef={[Function]}
          >
            <WithStyles(Button)
              aria-describedby={null}
              className="WidgetTable-addRowButton-6"
              color="secondary"
              data-cy="addrowbutton"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseLeave={[Function]}
              onMouseOver={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
              title="Add row to bottom of table"
              variant="fab"
            >
              <Button
                aria-describedby={null}
                className="WidgetTable-addRowButton-6"
                classes={
                  Object {
                    "colorInherit": "MuiButton-colorInherit-35",
                    "contained": "MuiButton-contained-25",
                    "containedPrimary": "MuiButton-containedPrimary-26",
                    "containedSecondary": "MuiButton-containedSecondary-27",
                    "disabled": "MuiButton-disabled-34",
                    "extendedFab": "MuiButton-extendedFab-32",
                    "fab": "MuiButton-fab-31",
                    "flat": "MuiButton-flat-19",
                    "flatPrimary": "MuiButton-flatPrimary-20",
                    "flatSecondary": "MuiButton-flatSecondary-21",
                    "focusVisible": "MuiButton-focusVisible-33",
                    "fullWidth": "MuiButton-fullWidth-39",
                    "label": "MuiButton-label-15",
                    "mini": "MuiButton-mini-36",
                    "outlined": "MuiButton-outlined-22",
                    "outlinedPrimary": "MuiButton-outlinedPrimary-23",
                    "outlinedSecondary": "MuiButton-outlinedSecondary-24",
                    "raised": "MuiButton-raised-28",
                    "raisedPrimary": "MuiButton-raisedPrimary-29",
                    "raisedSecondary": "MuiButton-raisedSecondary-30",
                    "root": "MuiButton-root-14",
                    "sizeLarge": "MuiButton-sizeLarge-38",
                    "sizeSmall": "MuiButton-sizeSmall-37",
                    "text": "MuiButton-text-16",
                    "textPrimary": "MuiButton-textPrimary-17",
                    "textSecondary": "MuiButton-textSecondary-18",
                  }
                }
                color="secondary"
                component="button"
                data-cy="addrowbutton"
                disableFocusRipple={false}
                disabled={false}
                fullWidth={false}
                mini={false}
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onMouseLeave={[Function]}
                onMouseOver={[Function]}
                onTouchEnd={[Function]}
                onTouchStart={[Function]}
                size="medium"
                title="Add row to bottom of table"
                type="button"
                variant="fab"
              >
                <WithStyles(ButtonBase)
                  aria-describedby={null}
                  className="MuiButton-root-14 MuiButton-fab-31 MuiButton-contained-25 MuiButton-containedSecondary-27 MuiButton-raised-28 MuiButton-raisedSecondary-30 WidgetTable-addRowButton-6"
                  component="button"
                  data-cy="addrowbutton"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="MuiButton-focusVisible-33"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseLeave={[Function]}
                  onMouseOver={[Function]}
                  onTouchEnd={[Function]}
                  onTouchStart={[Function]}
                  title="Add row to bottom of table"
                  type="button"
                >
                  <ButtonBase
                    aria-describedby={null}
                    centerRipple={false}
                    className="MuiButton-root-14 MuiButton-fab-31 MuiButton-contained-25 MuiButton-containedSecondary-27 MuiButton-raised-28 MuiButton-raisedSecondary-30 WidgetTable-addRowButton-6"
                    classes={
                      Object {
                        "disabled": "MuiButtonBase-disabled-41",
                        "focusVisible": "MuiButtonBase-focusVisible-42",
                        "root": "MuiButtonBase-root-40",
                      }
                    }
                    component="button"
                    data-cy="addrowbutton"
                    disableRipple={false}
                    disableTouchRipple={false}
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="MuiButton-focusVisible-33"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseLeave={[Function]}
                    onMouseOver={[Function]}
                    onTouchEnd={[Function]}
                    onTouchStart={[Function]}
                    tabIndex="0"
                    title="Add row to bottom of table"
                    type="button"
                  >
                    <button
                      aria-describedby={null}
                      className="MuiButtonBase-root-40 MuiButton-root-14 MuiButton-fab-31 MuiButton-contained-25 MuiButton-containedSecondary-27 MuiButton-raised-28 MuiButton-raisedSecondary-30 WidgetTable-addRowButton-6"
                      data-cy="addrowbutton"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseOver={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex="0"
                      title="Add row to bottom of table"
                      type="button"
                    >
                      <span
                        className="MuiButton-label-15"
                      >
                        <pure(AddIcon)
                          style={
                            Object {
                              "height": "32px",
                              "width": "32px",
                            }
                          }
                        >
                          <AddIcon
                            style={
                              Object {
                                "height": "32px",
                                "width": "32px",
                              }
                            }
                          >
                            <WithStyles(SvgIcon)
                              style={
                                Object {
                                  "height": "32px",
                                  "width": "32px",
                                }
                              }
                            >
                              <SvgIcon
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction-46",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled-48",
                                    "colorError": "MuiSvgIcon-colorError-47",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary-44",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary-45",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-49",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-51",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-50",
                                    "root": "MuiSvgIcon-root-43",
                                  }
                                }
                                color="inherit"
                                component="svg"
                                fontSize="default"
                                style={
                                  Object {
                                    "height": "32px",
                                    "width": "32px",
                                  }
                                }
                                viewBox="0 0 24 24"
                              >
                                <svg
                                  aria-hidden="true"
                                  className="MuiSvgIcon-root-43"
                                  focusable="false"
                                  role="presentation"
                                  style={
                                    Object {
                                      "height": "32px",
                                      "width": "32px",
                                    }
                                  }
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                  />
                                  <path
                                    d="M0 0h24v24H0z"
                                    fill="none"
                                  />
                                </svg>
                              </SvgIcon>
                            </WithStyles(SvgIcon)>
                          </AddIcon>
                        </pure(AddIcon)>
                      </span>
                      <WithStyles(TouchRipple)
                        center={false}
                        innerRef={[Function]}
                      >
                        <TouchRipple
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child-56",
                              "childLeaving": "MuiTouchRipple-childLeaving-57",
                              "childPulsate": "MuiTouchRipple-childPulsate-58",
                              "ripple": "MuiTouchRipple-ripple-53",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-55",
                              "rippleVisible": "MuiTouchRipple-rippleVisible-54",
                              "root": "MuiTouchRipple-root-52",
                            }
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="MuiTouchRipple-root-52"
                            component="span"
                            enter={true}
                            exit={true}
                          >
                            <span
                              className="MuiTouchRipple-root-52"
                            />
                          </TransitionGroup>
                        </TouchRipple>
                      </WithStyles(TouchRipple)>
                    </button>
                  </ButtonBase>
                </WithStyles(ButtonBase)>
              </Button>
            </WithStyles(Button)>
          </RootRef>
          <WithTheme(Popper)
            className="MuiTooltip-popper-7"
            id={null}
            open={false}
            placement="center"
            transition={true}
          >
            <Popper
              className="MuiTooltip-popper-7"
              disablePortal={false}
              id={null}
              open={false}
              placement="center"
              theme={
                Object {
                  "breakpoints": Object {
                    "between": [Function],
                    "down": [Function],
                    "keys": Array [
                      "xs",
                      "sm",
                      "md",
                      "lg",
                      "xl",
                    ],
                    "only": [Function],
                    "up": [Function],
                    "values": Object {
                      "lg": 1280,
                      "md": 960,
                      "sm": 600,
                      "xl": 1920,
                      "xs": 0,
                    },
                    "width": [Function],
                  },
                  "direction": "ltr",
                  "mixins": Object {
                    "gutters": [Function],
                    "toolbar": Object {
                      "@media (min-width:0px) and (orientation: landscape)": Object {
                        "minHeight": 48,
                      },
                      "@media (min-width:600px)": Object {
                        "minHeight": 64,
                      },
                      "minHeight": 56,
                    },
                  },
                  "overrides": Object {},
                  "palette": Object {
                    "action": Object {
                      "active": "rgba(0, 0, 0, 0.54)",
                      "disabled": "rgba(0, 0, 0, 0.26)",
                      "disabledBackground": "rgba(0, 0, 0, 0.12)",
                      "hover": "rgba(0, 0, 0, 0.08)",
                      "hoverOpacity": 0.08,
                      "selected": "rgba(0, 0, 0, 0.14)",
                    },
                    "augmentColor": [Function],
                    "background": Object {
                      "default": "#fafafa",
                      "paper": "#fff",
                    },
                    "common": Object {
                      "black": "#000",
                      "white": "#fff",
                    },
                    "contrastThreshold": 3,
                    "divider": "rgba(0, 0, 0, 0.12)",
                    "error": Object {
                      "contrastText": "#fff",
                      "dark": "#d32f2f",
                      "light": "#e57373",
                      "main": "#f44336",
                    },
                    "getContrastText": [Function],
                    "grey": Object {
                      "100": "#f5f5f5",
                      "200": "#eeeeee",
                      "300": "#e0e0e0",
                      "400": "#bdbdbd",
                      "50": "#fafafa",
                      "500": "#9e9e9e",
                      "600": "#757575",
                      "700": "#616161",
                      "800": "#424242",
                      "900": "#212121",
                      "A100": "#d5d5d5",
                      "A200": "#aaaaaa",
                      "A400": "#303030",
                      "A700": "#616161",
                    },
                    "primary": Object {
                      "contrastText": "#fff",
                      "dark": "#303f9f",
                      "light": "#7986cb",
                      "main": "#3f51b5",
                    },
                    "secondary": Object {
                      "contrastText": "#fff",
                      "dark": "#c51162",
                      "light": "#ff4081",
                      "main": "#f50057",
                    },
                    "text": Object {
                      "disabled": "rgba(0, 0, 0, 0.38)",
                      "hint": "rgba(0, 0, 0, 0.38)",
                      "primary": "rgba(0, 0, 0, 0.87)",
                      "secondary": "rgba(0, 0, 0, 0.54)",
                    },
                    "tonalOffset": 0.2,
                    "type": "light",
                  },
                  "props": Object {},
                  "shadows": Array [
                    "none",
                    "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
                    "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
                    "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
                    "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
                    "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
                    "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
                    "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
                    "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
                    "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
                    "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
                    "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
                    "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
                    "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
                    "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
                    "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
                    "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
                    "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
                    "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
                    "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
                    "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
                    "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
                    "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
                    "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
                    "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
                  ],
                  "shape": Object {
                    "borderRadius": 4,
                  },
                  "spacing": Object {
                    "unit": 8,
                  },
                  "transitions": Object {
                    "create": [Function],
                    "duration": Object {
                      "complex": 375,
                      "enteringScreen": 225,
                      "leavingScreen": 195,
                      "short": 250,
                      "shorter": 200,
                      "shortest": 150,
                      "standard": 300,
                    },
                    "easing": Object {
                      "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                      "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                      "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                      "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                    },
                    "getAutoHeightDuration": [Function],
                  },
                  "typography": Object {
                    "body1": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 400,
                      "lineHeight": "1.46429em",
                    },
                    "body2": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "lineHeight": "1.71429em",
                    },
                    "button": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.875rem",
                      "fontWeight": 500,
                      "textTransform": "uppercase",
                    },
                    "caption": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "0.75rem",
                      "fontWeight": 400,
                      "lineHeight": "1.375em",
                    },
                    "display1": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.125rem",
                      "fontWeight": 400,
                      "lineHeight": "1.20588em",
                    },
                    "display2": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "2.8125rem",
                      "fontWeight": 400,
                      "lineHeight": "1.13333em",
                      "marginLeft": "-.02em",
                    },
                    "display3": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "3.5rem",
                      "fontWeight": 400,
                      "letterSpacing": "-.02em",
                      "lineHeight": "1.30357em",
                      "marginLeft": "-.02em",
                    },
                    "display4": Object {
                      "color": "rgba(0, 0, 0, 0.54)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "7rem",
                      "fontWeight": 300,
                      "letterSpacing": "-.04em",
                      "lineHeight": "1.14286em",
                      "marginLeft": "-.04em",
                    },
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": 14,
                    "fontWeightLight": 300,
                    "fontWeightMedium": 500,
                    "fontWeightRegular": 400,
                    "headline": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.5rem",
                      "fontWeight": 400,
                      "lineHeight": "1.35417em",
                    },
                    "pxToRem": [Function],
                    "round": [Function],
                    "subheading": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1rem",
                      "fontWeight": 400,
                      "lineHeight": "1.5em",
                    },
                    "title": Object {
                      "color": "rgba(0, 0, 0, 0.87)",
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": "1.3125rem",
                      "fontWeight": 500,
                      "lineHeight": "1.16667em",
                    },
                  },
                  "zIndex": Object {
                    "appBar": 1100,
                    "drawer": 1200,
                    "mobileStepper": 1000,
                    "modal": 1300,
                    "snackbar": 1400,
                    "tooltip": 1500,
                  },
                }
              }
              transition={true}
            />
          </WithTheme(Popper)>
        </Tooltip>
      </WithStyles(Tooltip)>
    </div>
  </WidgetTable>
</WithStyles(WidgetTable)>
`;
